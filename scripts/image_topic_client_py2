#!/usr/bin/env python2

# Written mainly for python2, as this client might be used 
# to test the service calls from a older system with older ROS distribution
#
# The difference to image_client_py2 is, that we read the images from a topic
# instead of data images below data/

from __future__ import print_function

import sys
import rospy
import rospkg
import cv2
import message_filters
from noetic_im_proc_container.srv import *
from cv_bridge import CvBridge, CvBridgeError
from sensor_msgs.msg import Image, CompressedImage
from std_msgs.msg import String

# OpenCV
import cv2


# If you start with the usual bag files we have for PR2 (compressed images for rgb and depth only), please start this command before running this script:
#   roslaunch noetic_im_proc_container uncompress_and_throttle.launch
#
#   Rationale: In bag files, we only have compressed image. The compressed image decoding method from cvbridge fails to interpret the depth image.
#              This is why we'll decode them first.


service_name = "/image_service"
rgb_topic = "/kinect_head/rgb/image_color/image_raw"
depth_topic = "/kinect_head/depth_registered/image_raw"


class ImageTopicClient:
    def __init__(self):
        print("Waiting for "+ service_name +" service to come up...")
        rospy.wait_for_service(service_name)
        self.im_service_client = rospy.ServiceProxy(service_name, ImageService)

        # Subscribe to the rgb and depth topics without a callback
        self.rgb_subscriber = message_filters.Subscriber(rgb_topic,
            Image)
        self.depth_subscriber = message_filters.Subscriber(depth_topic,
            Image)

        # Setup a synchronizer to get (almost synchron) pairs of rgb + depth images
        self.synchronizer = message_filters.ApproximateTimeSynchronizer([self.rgb_subscriber, self.depth_subscriber],queue_size=3, slop=0.5)
        self.synchronizer.registerCallback(self.callback)
        self.bridge = CvBridge()

    def callback(self, rgb_msg, depth_msg):
        print("Images received")
        cv_rgb_image = self.bridge.imgmsg_to_cv2(rgb_msg, desired_encoding="passthrough")
        cv_depth_image = self.bridge.imgmsg_to_cv2(depth_msg)
        if cv_depth_image is None:
            print("Failure during encoding of depth image")
        if cv_rgb_image is None:
            print("Failure during encoding of rgb image")

        # Do OpenCV stuff if you need to
        # ...

        # Convert to sensor_msgs/Image
        ros_rgb_image = self.bridge.cv2_to_imgmsg(cv_rgb_image, encoding="passthrough")
        ros_depth_image = self.bridge.cv2_to_imgmsg(cv_depth_image, encoding="passthrough" )

        print("Calling service")
        str_msg = String("description")
        response = self.im_service_client(ros_rgb_image, ros_depth_image, str_msg)


if __name__ == "__main__":
    rospy.init_node('image_topic_client_py2', anonymous=True)
    image_topic_client = ImageTopicClient()
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down image_client_py2")
    cv2.destroyAllWindows()
